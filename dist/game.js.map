{"version":3,"sources":["../src/game.js"],"names":["DEBUG","DRAW_GRID_COORDS","DISABLE_FINISH","STAR_STEP_FACTOR","FINISH_FILL_COLOR","Game","svgGameElem","s","Snap","levels","concat","test_levels","localStorage","getItem","highestFinishedLevel","setItem","parseInt","howToPlayDialogElem","style","display","currentLevel","levelNumber","moveAnimation","isMobile","loadLevelData","length","striped","path","attr","stroke","strokeWidth","pattern","clear","createDefs","levelFinishDialogElem","levelFinished","shapes","activeShape","reactiveShapes","dragCount","dragFromX","dragFromY","lastDir","futureGrid","that","xhr","XMLHttpRequest","responseType","onload","e","levelData","response","clearLevel","createLevel","open","f","send","levelTitle","settings","title","minMoves","gridWidth","gridHeight","screenWidth","window","innerWidth","maxGameHeight","innerHeight","headerElem","offsetHeight","footerElem","statusElem","cellSize","Math","floor","gameWidth","gameHeight","width","height","updateStatus","updateHeader","drawGrid","grid","Array","fill","y","seenGrid","shapeId","i","elements","j","shape","Shape","push","gameCheckpoints","checkpoints","checkpointShapeGroup","g","quarterCellSize","checkpoint","circle","x","add","strokeOpacity","prevLevelElem","opacity","nextLevelElem","drawGridCoords","console","log","finished","getShapeAtPos","checkFinish","coords","text","visibleGrid","line","gridCell","getShapeById","pos","groupId","excludeShapeId","getGameGridPos","type","getReactiveShapes","setAttrForActiveGroup","actCol","deltaX","deltaY","dir","moved","abs","dragFactor","move","clearSeenGrid","game","selectAll","moreLevelsElem","starCount","levelFinishMessageElem","textContent","levelFinishMessage","levelFinishStarsElems","src","levelfinishMoveCountElem","noMoreLevelsElem","setTimeout","col","caption","toLowerCase","levelTitleElem","innerHTML"],"mappings":"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","file":"game.js","sourcesContent":["const DEBUG = false;\r\nconst DRAW_GRID_COORDS = false; // Useful for level design\r\nconst DISABLE_FINISH = false;\r\n\r\nconst STAR_STEP_FACTOR = 3; // minMoves * this for less stars\r\nconst FINISH_FILL_COLOR = \"#4E7AC7\"; // Fill the solution path with this color\r\n\r\nclass Game {\r\n\r\n  constructor(svgGameElem) {\r\n    // Svg Game\r\n    this.svgGameElem = svgGameElem;\r\n    this.s = Snap(this.svgGameElem);\r\n\r\n    this.levels = levels.concat(test_levels) // Append test levels after normal ones\r\n\r\n    // Get the highest finished level\r\n    if (localStorage.getItem(\"highestFinishedLevel\") === null) {\r\n      this.highestFinishedLevel = 0;\r\n      localStorage.setItem(\"highestFinishedLevel\", this.highestFinishedLevel);\r\n    } else {\r\n      this.highestFinishedLevel = parseInt(localStorage.getItem(\"highestFinishedLevel\"));\r\n    }\r\n\r\n    // Get the current level\r\n    if (localStorage.getItem(\"currentLevel\") === null) {\r\n      howToPlayDialogElem.style.display = \"block\"; // Show the how to play dialog for the first time\r\n      this.currentLevel = 1;\r\n      localStorage.setItem(\"currentLevel\", this.currentLevel);\r\n    } else {\r\n      this.currentLevel = parseInt(localStorage.getItem(\"currentLevel\"));\r\n    }\r\n\r\n    this.levelNumber = this.currentLevel - 1; // Level number, 0 indexed\r\n\r\n    // 0=Instant, 1=Fast, 2=Bounce\r\n    if (localStorage.getItem(\"moveAnimation\") === null) {\r\n      this.moveAnimation = (isMobile ? 0 : 2);\r\n      localStorage.setItem(\"moveAnimation\", this.moveAnimation)\r\n    } else {\r\n      this.moveAnimation = parseInt(localStorage.getItem(\"moveAnimation\"));\r\n    }\r\n\r\n    this.loadLevelData(); // And create the level\r\n  }\r\n\r\n  /**\r\n   * Controls\r\n   */\r\n\r\n  nextLevel() {\r\n    if ((this.levelNumber < this.levels.length-1 && this.levelNumber < this.highestFinishedLevel) || DEBUG) {\r\n      this.levelNumber++;\r\n      this.loadLevelData();\r\n    }\r\n  }\r\n\r\n  prevLevel() {\r\n    if (this.levelNumber > 0) {\r\n      this.levelNumber--;\r\n      this.loadLevelData();\r\n    }\r\n  }\r\n\r\n  reloadLevel() {\r\n    this.loadLevelData();\r\n  }\r\n\r\n  /**\r\n   * Create shared defs for later use.\r\n   */\r\n  createDefs() {\r\n    // Patterns\r\n    this.striped = this.s.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\r\n      stroke: \"rgba(255,211,147,0.85)\",\r\n      strokeWidth: 5\r\n    }).pattern(0, 0, 10, 10);\r\n  }\r\n\r\n  /**\r\n   * Setup a new level\r\n   */\r\n  clearLevel() {\r\n    this.s.clear(); // Clear all svg elements\r\n    this.createDefs(); // Create defs like shadow\r\n\r\n    levelFinishDialogElem.style.display = \"none\"; // Hide finish banner\r\n\r\n    this.levelFinished = false; // Is the level finished\r\n    this.shapes = []; // List of all shapes\r\n    this.activeShape = false; // The shape which is selected\r\n    this.reactiveShapes = []; // Other shapes in shape group as active shape\r\n\r\n    this.dragCount = 0;\r\n    // Drag points source\r\n    this.dragFromX = 0;\r\n    this.dragFromY = 0;\r\n    this.lastDir = \"\"; // Last direction\r\n\r\n    this.futureGrid = []; // The game grid containing the next move\r\n  }\r\n\r\n  /**\r\n   * Loads json level data\r\n   */\r\n  loadLevelData() {\r\n    let that = this;\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType = \"json\";\r\n    xhr.onload = function(e) {\r\n      that.levelData = xhr.response;\r\n      that.clearLevel();\r\n      that.createLevel();\r\n    };\r\n    xhr.open(\"get\", \"levels/\" + this.levels[this.levelNumber].f, true);\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Create the level from the data\r\n   */\r\n  createLevel() {\r\n    this.currentLevel = this.levelNumber + 1;\r\n    localStorage.setItem(\"currentLevel\", this.currentLevel);\r\n\r\n    this.levelTitle = this.levelData.settings.title;\r\n    this.minMoves = this.levelData.settings.minMoves;\r\n\r\n    // Get level grid dimensions\r\n    this.gridWidth = this.levelData.settings.gridWidth;\r\n    this.gridHeight = this.levelData.settings.gridHeight;\r\n\r\n    let screenWidth = window.innerWidth;\r\n    let maxGameHeight = window.innerHeight - headerElem.offsetHeight - footerElem.offsetHeight - statusElem.offsetHeight;\r\n\r\n    // Adjust the svg element dimensions accordingly\r\n    this.cellSize = Math.floor(screenWidth / this.gridWidth);\r\n\r\n    // Check height\r\n    if (this.cellSize * this.gridHeight > maxGameHeight)\r\n      this.cellSize = Math.floor(maxGameHeight / this.gridHeight);\r\n\r\n    this.gameWidth = this.cellSize * this.gridWidth;\r\n    this.gameHeight = this.cellSize * this.gridHeight;\r\n    this.svgGameElem.style.width = this.gameWidth + \"px\";\r\n    this.svgGameElem.style.height = this.gameHeight + \"px\";\r\n\r\n    headerElem.style.width = this.svgGameElem.style.width;\r\n\r\n    this.updateStatus();\r\n    this.updateHeader();\r\n    this.drawGrid();\r\n\r\n    // Create the internal game grid\r\n    this.grid = new Array(this.gridHeight).fill(0);\r\n    for (let y = 0; y < this.gridHeight; y++) {\r\n      this.grid[y] = new Array(this.gridWidth).fill(0);\r\n    }\r\n\r\n    // Seen grid is used to know if the game is finished\r\n    // Create the internal game grid\r\n    this.seenGrid = new Array(this.gridHeight).fill(false);\r\n    for (let y = 0; y < this.gridHeight; y++) {\r\n      this.seenGrid[y] = new Array(this.gridWidth).fill(false);\r\n    }\r\n\r\n    let shapeId = 1;\r\n    for (let i = 0; i < this.levelData.elements.length; i++) {\r\n      for (let j = 0; j < this.levelData.elements[i].shapes.length; j++) {\r\n        // Loop through all the related shapes\r\n        let shape = new Shape(\r\n          shapeId++, // shapeId\r\n          i + 1, // groupId\r\n          this.levelData.elements[i].shapes[j], // shapeData\r\n          this.levelData.elements[i].attr // attr\r\n        );\r\n        this.shapes.push(shape);\r\n      }\r\n\r\n    }\r\n\r\n    // Add the checkpoints\r\n    this.gameCheckpoints = this.levelData.settings.checkpoints;\r\n    this.checkpointShapeGroup = this.s.g();\r\n\r\n    let quarterCellSize = Math.floor(this.cellSize / 4);\r\n\r\n    for (let checkpoint of this.gameCheckpoints) {\r\n      let shape = this.s.circle(\r\n        checkpoint.x * this.cellSize + quarterCellSize * 2,\r\n        checkpoint.y * this.cellSize + quarterCellSize * 2,\r\n        quarterCellSize\r\n      );\r\n      this.checkpointShapeGroup.add(shape);\r\n    }\r\n    this.checkpointShapeGroup.attr({\r\n      fill: FINISH_FILL_COLOR,\r\n      stroke: \"white\",\r\n      strokeWidth: 3,\r\n      strokeOpacity: 0.5\r\n    });\r\n\r\n    // Show navigation\r\n    if (this.levelNumber > 0 || DEBUG)\r\n      prevLevelElem.style.opacity = 1;\r\n    if (this.levelNumber < this.levels.length-1 && this.highestFinishedLevel > this.levelNumber || DEBUG)\r\n      nextLevelElem.style.opacity = 1;\r\n\r\n    if (DRAW_GRID_COORDS)\r\n      this.drawGridCoords();\r\n\r\n    if (DEBUG) {\r\n      console.log(this.levels[this.levelNumber].f)\r\n      console.log(\"minMoves:\" + this.minMoves + \" Next step:\" +  this.minMoves * STAR_STEP_FACTOR)\r\n    }\r\n\r\n  }\r\n\r\n  clearSeenGrid() {\r\n    for (let y = 0; y < this.gridHeight; y++)\r\n      for (let x = 0; x < this.gridWidth; x++)\r\n        this.seenGrid[y][x] = false;\r\n  }\r\n\r\n  /*\r\n   * Check if player has found a solution\r\n   */\r\n  checkFinish(x, y, finished) {\r\n    if (DISABLE_FINISH)\r\n      return false; // Skip checking for finish\r\n\r\n    if (finished || this.grid[y][x] === 0 || this.seenGrid[y][x] === true)\r\n      return finished; // Found a solution, alreay seen the cell or the cell is empty\r\n    else\r\n      this.seenGrid[y][x] = true; // Mark this cell as seen\r\n\r\n    if (this.grid[y][x] !== null && this.gameCheckpoints[1].x == x && this.gameCheckpoints[1].y == y) {\r\n      this.getShapeAtPos(x, y).shape.attr({\r\n        fill: FINISH_FILL_COLOR\r\n      });\r\n      return true; // Finish was found\r\n    }\r\n\r\n    // Check all directions\r\n    if (x < this.gridWidth - 1)\r\n      finished = this.checkFinish(x + 1, y, finished); // Right\r\n    if (x > 0)\r\n      finished = this.checkFinish(x - 1, y, finished); // Left\r\n    if (y > 0)\r\n      finished = this.checkFinish(x, y - 1, finished); // Up\r\n    if (y < this.gridHeight - 1)\r\n      finished = this.checkFinish(x, y + 1, finished); // Down\r\n\r\n    if (finished === true) {\r\n      this.getShapeAtPos(x, y).shape.attr({\r\n        fill: FINISH_FILL_COLOR\r\n      });\r\n\r\n    }\r\n\r\n    return finished;\r\n  }\r\n\r\n\r\n  /**\r\n   * Draws x,y coordinates for the grid\r\n   */\r\n  drawGridCoords() {\r\n    let coords = this.s.g();\r\n    // group lines and apply\r\n    for (let y = 0; y <= this.gridHeight; y++) {\r\n      for (let x = 0; x <= this.gridWidth; x++) {\r\n        // Draw cell on the grid\r\n        coords.add(this.s.text(x * this.cellSize + 5, (y + 1) * this.cellSize - 5, x + \",\" + y));\r\n      }\r\n    }\r\n\r\n    coords.attr({\r\n      fill: \"#0000ff\",\r\n      opacity: 0.5,\r\n      \"font-size\": \"18px\",\r\n      \"cursor\": \"default\"\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Draws a grid\r\n   */\r\n  drawGrid() {\r\n    let visibleGrid = this.s.g();\r\n    // group lines and apply\r\n    for (let x = 0; x <= this.gridWidth; x++) {\r\n      visibleGrid.add(this.s.line(x * this.cellSize, 0, x * this.cellSize, this.gameHeight));\r\n    }\r\n\r\n    for (let y = 0; y <= this.gridHeight; y++) {\r\n      visibleGrid.add(this.s.line(0, y * this.cellSize, this.gameWidth, y * this.cellSize));\r\n    }\r\n\r\n    visibleGrid.attr({\r\n      stroke: \"#fff\",\r\n      opacity: 0.25\r\n    });\r\n  }\r\n\r\n  getShapeById(shapeId) {\r\n    for (let shape of this.shapes)\r\n      if (shape.shapeId == shapeId)\r\n        return shape;\r\n\r\n    return false;\r\n  }\r\n\r\n  getShapeAtPos(x, y) {\r\n    let gridCell = this.grid[y][x];\r\n    if (gridCell !== 0)\r\n      return this.getShapeById(gridCell.shapeId);\r\n    else\r\n      return false;\r\n  }\r\n\r\n  getGameGridPos(x, y) {\r\n    let pos = {};\r\n    pos.x = Math.floor(x / this.cellSize);\r\n    pos.y = Math.floor(y / this.cellSize);\r\n    return pos;\r\n  }\r\n\r\n  getReactiveShapes(groupId, excludeShapeId) {\r\n    let reactiveShapes = [];\r\n    for (let shape of this.shapes)\r\n      if (shape.shapeId != excludeShapeId && shape.groupId == groupId)\r\n        reactiveShapes.push(shape);\r\n\r\n    return reactiveShapes;\r\n  }\r\n\r\n  setAttrForActiveGroup(attr) {\r\n    this.activeShape.shape.attr(attr);\r\n\r\n    for (let shape of this.reactiveShapes)\r\n      shape.shape.attr(attr);\r\n  }\r\n\r\n  startDrag(x, y) {\r\n    if (this.levelFinished)\r\n      return;\r\n\r\n    let pos = this.getGameGridPos(x, y);\r\n    this.activeShape = this.getShapeAtPos(pos.x, pos.y);\r\n\r\n    // Player can only move active shapes\r\n    if (this.activeShape && this.activeShape.attr.type != \"active\") {\r\n      this.activeShape = false;\r\n      return;\r\n    }\r\n\r\n    this.reactiveShapes = this.getReactiveShapes(this.activeShape.groupId, this.activeShape.shapeId);\r\n\r\n    if (this.activeShape) {\r\n\r\n      this.setAttrForActiveGroup({\r\n        fill: this.activeShape.attr.actCol\r\n      });\r\n\r\n      this.dragFromX = x;\r\n      this.dragFromY = y;\r\n    }\r\n\r\n  }\r\n\r\n  onDrag(x, y) {\r\n    if (!this.levelFinished && this.activeShape) {\r\n      let deltaX, deltaY;\r\n      let dir = this.lastDir;\r\n      let moved = false;\r\n\r\n      deltaX = Math.abs(this.dragFromX - x);\r\n      deltaY = Math.abs(this.dragFromY - y);\r\n\r\n      if (deltaX > deltaY) {\r\n        if (this.dragFromX > x)\r\n          dir = \"L\";\r\n        else if (this.dragFromX < x)\r\n          dir = \"R\";\r\n      } else {\r\n        if (this.dragFromY > y)\r\n          dir = \"U\";\r\n        else if (this.dragFromY < y)\r\n          dir = \"D\";\r\n      }\r\n\r\n      let dragFactor = (dir == this.lastDir ? 1 : 0.5);\r\n\r\n      if (dir == \"L\" && deltaX > this.cellSize * dragFactor) {\r\n        // Move left\r\n        moved = this.activeShape.move(-1, 0, true);\r\n      } else if (dir == \"R\" && deltaX > this.cellSize * dragFactor) {\r\n        // Move right\r\n        moved = this.activeShape.move(1, 0, true);\r\n      } else if (dir == \"U\" && deltaY > this.cellSize * dragFactor) {\r\n        // Move up\r\n        moved = this.activeShape.move(0, -1, true);\r\n      } else if (dir == \"D\" && deltaY > this.cellSize * dragFactor) {\r\n        // Move down\r\n        moved = this.activeShape.move(0, 1, true);\r\n      }\r\n\r\n      if (moved) {\r\n        this.dragFromX = x;\r\n        this.dragFromY = y;\r\n        this.lastDir = dir;\r\n        this.dragCount++;\r\n\r\n        this.updateStatus();\r\n\r\n        this.setAttrForActiveGroup({\r\n          opacity: 1\r\n        }); // Show all shapes in group enabled\r\n\r\n        // Is the level finished\r\n        this.clearSeenGrid();\r\n        this.levelFinished = this.checkFinish(this.gameCheckpoints[0].x, this.gameCheckpoints[0].y, false);\r\n\r\n        if (this.levelFinished) {\r\n          this.checkpointShapeGroup.attr({\r\n            fill: \"#ffffff\"\r\n          });\r\n\r\n          game.s.selectAll(\"#icon\").attr({\r\n            opacity: 0.5\r\n            // display: \"none\"\r\n          });\r\n\r\n          // If this level is your new record\r\n          if (this.levelNumber < this.levels.length-1 && this.levelNumber == this.highestFinishedLevel) {\r\n            this.highestFinishedLevel++;\r\n            localStorage.setItem(\"highestFinishedLevel\", this.highestFinishedLevel);\r\n          }\r\n\r\n          if (this.levelNumber < this.levels.length-1) {\r\n            nextLevelElem.style.opacity = 1; // Show next level arrow\r\n            moreLevelsElem.style.display = \"inline-block\"; // Also link in finish dialog\r\n          } else\r\n            moreLevelsElem.style.display = \"none\";\r\n\r\n          // Display the level finish banner\r\n          let starCount = 1; // Everybody get one star\r\n          if (this.minMoves * STAR_STEP_FACTOR >= this.dragCount)\r\n            starCount = 2;\r\n          if (this.minMoves >= this.dragCount)\r\n            starCount = 3;\r\n\r\n          levelFinishMessageElem.textContent = levelFinishMessage[starCount - 1];\r\n\r\n          levelFinishStarsElems[1].src = (starCount >= 2) ? \"img/logo.svg\" : \"img/gray-x-logo.svg\";\r\n          levelFinishStarsElems[2].src = (starCount >= 3) ? \"img/logo.svg\" : \"img/gray-x-logo.svg\";\r\n\r\n          levelfinishMoveCountElem.textContent = this.dragCount;\r\n\r\n          // Show msg if this was the last normal level\r\n          if (this.levelNumber == levels.length - 1)\r\n            noMoreLevelsElem.style.display = \"block\";\r\n          else\r\n            noMoreLevelsElem.style.display = \"none\";\r\n\r\n          setTimeout(function() {\r\n            levelFinishDialogElem.style.display = \"block\";\r\n          }, 650); // Show the level finish dialog after 0.65 second\r\n\r\n        } // End level finished\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  endDrag() {\r\n    if (this.activeShape) {\r\n\r\n      if (!this.levelFinished)\r\n        this.setAttrForActiveGroup({\r\n          opacity: 1,\r\n          stroke: \"#ffffff\",\r\n          fill: this.activeShape.attr.col\r\n        }); // Reset shape in group\r\n\r\n      this.activeShape = false;\r\n      this.reactiveShapes = [];\r\n    }\r\n  }\r\n\r\n  updateStatus() {\r\n    statusElem.textContent = \"moves \" + this.dragCount;\r\n    statusElem.style.opacity = 1;\r\n  }\r\n\r\n  updateHeader() {\r\n    let caption = 'Level ' + (this.levelNumber + 1) + '<span>(' + this.levelTitle.toLowerCase() + ')</span>';\r\n    levelTitleElem.innerHTML = caption;\r\n    headerElem.style.opacity = 1; // Unhide header\r\n  }\r\n\r\n\r\n}\r\n"]}